# Standalone Makefile (no IDE dependency)
# Extracted from obj/ autogenerated makefiles

# Project
PROJECT := RISKYMSXCART
FIRMWARE_DIR := firmware
OUTDIR  := $(FIRMWARE_DIR)/build

# Extract version from version.h
VERSION_FILE := $(FIRMWARE_DIR)/User/version.h
FIRMWARE_VERSION := $(shell grep 'FIRMWARE_VERSION_STRING' $(VERSION_FILE) | sed 's/.*"\(.*\)".*/\1/' | tr -d ' ')

# Toolchain (override TOOLCHAIN_PREFIX if needed)
TOOLCHAIN_PATH := /usr/share/MRS2/MRS-linux-x64/resources/app/resources/linux/components/WCH/Toolchain/RISC-V\ Embedded\ GCC12/bin
TOOLCHAIN_PREFIX ?= $(TOOLCHAIN_PATH)/riscv-wch-elf
CC       := $(TOOLCHAIN_PREFIX)-gcc
OBJCOPY  := $(TOOLCHAIN_PREFIX)-objcopy
OBJDUMP  := $(TOOLCHAIN_PREFIX)-objdump
SIZE     := $(TOOLCHAIN_PREFIX)-size
RM       := rm -rf

# CPU/ABI flags (from IDE)
ARCH := rv32imacxw
ABI  := ilp32
CPUFLAGS := -march=$(ARCH) -mabi=$(ABI) -msmall-data-limit=8 -msave-restore

# Include paths (from IDE)
INCLUDES := \
  -I$(FIRMWARE_DIR)/Debug \
  -I$(FIRMWARE_DIR)/Core \
  -I$(FIRMWARE_DIR)/User \
  -I$(FIRMWARE_DIR)/Peripheral/inc \
  -I$(FIRMWARE_DIR)/User/USB_Host \
  -I$(FIRMWARE_DIR)/User/FATFS

# Compilation flags (from IDE)
COMMON_WARN   := -Wunused -Wuninitialized
COMMON_OPTS   := -fmax-errors=20 -Os -fmessage-length=0 -fsigned-char -ffunction-sections -fdata-sections -fno-common -std=gnu99
COMPILE_FLAGS := $(CPUFLAGS) $(COMMON_OPTS) $(COMMON_WARN)
CFLAGS        := $(COMPILE_FLAGS) $(INCLUDES) -Wa,-adhlns="$@.lst" -v -MMD -MP
ASFLAGS       := $(CPUFLAGS) -x assembler-with-cpp -I$(FIRMWARE_DIR)/Startup -I$(FIRMWARE_DIR)/User -v -MMD -MP

# Linker script and flags (from IDE)
LDSCRIPT := $(FIRMWARE_DIR)/Ld/Link.ld
LDFLAGS  := -T $(LDSCRIPT) -nostartfiles -Xlinker --gc-sections -Wl,-Map,"$(OUTDIR)/$(PROJECT).map" --specs=nano.specs --specs=nosys.specs

# Sources (explicit lists based on IDE makefiles to avoid unintended extras)
CORE_SRCS   := $(FIRMWARE_DIR)/Core/core_riscv.c
DEBUG_SRCS  := $(FIRMWARE_DIR)/Debug/debug.c
PERIPH_SRCS := \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_dac.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_dbgmcu.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_dma.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_exti.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_flash.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_gpio.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_iwdg.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_misc.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_pwr.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_rcc.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_rng.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_sdio.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_tim.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_usart.c \
  $(FIRMWARE_DIR)/Peripheral/src/ch32v30x_wwdg.c
USER_SRCS   := \
  $(FIRMWARE_DIR)/User/MSXTerminal.c \
  $(FIRMWARE_DIR)/User/cart.c \
  $(FIRMWARE_DIR)/User/ch32v30x_it.c \
  $(FIRMWARE_DIR)/User/emu2212.c \
  $(FIRMWARE_DIR)/User/gpio.c \
  $(FIRMWARE_DIR)/User/main.c \
  $(FIRMWARE_DIR)/User/programflash.c \
  $(FIRMWARE_DIR)/User/scc.c \
  $(FIRMWARE_DIR)/User/set_memory_split.c \
  $(FIRMWARE_DIR)/User/system_ch32v30x.c \
  $(FIRMWARE_DIR)/User/utils.c
FATFS_SRCS  := \
  $(FIRMWARE_DIR)/User/FATFS/diskio.c \
  $(FIRMWARE_DIR)/User/FATFS/ff.c \
  $(FIRMWARE_DIR)/User/FATFS/ffsystem.c \
  $(FIRMWARE_DIR)/User/FATFS/ffunicode.c \
  $(FIRMWARE_DIR)/User/FATFS/usb_disk.c
USB_SRCS    := \
  $(FIRMWARE_DIR)/User/USB_Host/ch32v30x_usbfs_host.c

C_SOURCES := $(CORE_SRCS) $(DEBUG_SRCS) $(PERIPH_SRCS) $(USER_SRCS) $(FATFS_SRCS) $(USB_SRCS)

ASM_SOURCES := $(wildcard $(FIRMWARE_DIR)/Startup/*.S)

# Objects and deps (preserve directory structure under OUTDIR)
COBJS := $(patsubst $(FIRMWARE_DIR)/%.c,$(OUTDIR)/$(FIRMWARE_DIR)/%.o,$(C_SOURCES))
AOBJS := $(patsubst $(FIRMWARE_DIR)/%.S,$(OUTDIR)/$(FIRMWARE_DIR)/%.o,$(ASM_SOURCES))
OBJS  := $(COBJS) $(AOBJS)
DEPS  := $(OBJS:.o=.d)

# Default goal
.PHONY: all
all: $(OUTDIR)/$(PROJECT).elf post-build

# Help target
.PHONY: help
help:
	@echo "Available targets:"
	@echo "  all       - Build the entire project (default)"
	@echo "  clean     - Remove all build artifacts"
	@echo "  version   - Show firmware version"
	@echo "  size      - Show binary size information"
	@echo "  list      - Generate disassembly listing"
	@echo "  help      - Show this help message"
	@echo ""
	@echo "Build output:"
	@echo "  Build files: $(OUTDIR)/"
	@echo "  Final binary: $(PROJECT)_$(FIRMWARE_VERSION).bin"

# Link
$(OUTDIR)/$(PROJECT).elf: $(OBJS) | $(OUTDIR)
	$(CC) $(COMPILE_FLAGS) $(LDFLAGS) -o $@ $(OBJS)

# Post-build artifacts (match IDE)
.PHONY: post-build
post-build: $(OUTDIR)/$(PROJECT).hex $(OUTDIR)/$(PROJECT).bin $(OUTDIR)/$(PROJECT).lst $(OUTDIR)/$(PROJECT).siz copy-binary

$(OUTDIR)/$(PROJECT).bin: $(OUTDIR)/$(PROJECT).elf | $(OUTDIR)
	$(OBJCOPY) -O binary $< $@

$(OUTDIR)/$(PROJECT).hex: $(OUTDIR)/$(PROJECT).elf | $(OUTDIR)
	$(OBJCOPY) -O ihex $< $@

$(OUTDIR)/$(PROJECT).lst: $(OUTDIR)/$(PROJECT).elf | $(OUTDIR)
	$(OBJDUMP) --all-headers --demangle --disassemble -M xw $< > $@

$(OUTDIR)/$(PROJECT).siz: $(OUTDIR)/$(PROJECT).elf | $(OUTDIR)
	$(SIZE) --format=berkeley $< > $@

# Copy binary to main folder with version name
.PHONY: copy-binary
copy-binary: $(OUTDIR)/$(PROJECT).bin
	@echo "Copying binary with version $(FIRMWARE_VERSION)"
	cp $(OUTDIR)/$(PROJECT).bin $(PROJECT)_$(FIRMWARE_VERSION).bin
	@echo "Binary copied to: $(PROJECT)_$(FIRMWARE_VERSION).bin"

# Compile C -> object (with per-file .lst and .d)
$(OUTDIR)/$(FIRMWARE_DIR)/%.o: $(FIRMWARE_DIR)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c -o $@ $< -MF $(@:.o=.d) -MT $@

# Assemble S -> object (with .d)
$(OUTDIR)/$(FIRMWARE_DIR)/%.o: $(FIRMWARE_DIR)/%.S
	@mkdir -p $(dir $@)
	$(CC) $(ASFLAGS) -c -o $@ $< -MF $(@:.o=.d) -MT $@

$(OUTDIR):
	@mkdir -p $(OUTDIR)

# Clean
.PHONY: clean
clean:
	$(RM) $(OUTDIR)

# Include dependencies
-include $(DEPS)

# Convenience targets
.PHONY: size list version
size: $(OUTDIR)/$(PROJECT).siz
list: $(OUTDIR)/$(PROJECT).lst
version:
	@echo "Firmware version: $(FIRMWARE_VERSION)"
